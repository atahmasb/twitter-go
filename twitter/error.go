package twitter

import (
	"fmt"
)

// A RequestFailure is an interface to extract request failure information from
// an Error.
type RequestFailure interface {
	error

	// The status code of the HTTP response.
	StatusCode() int

	// Returns a message generated by the twitter API sdk
	Message() string
}

// A Diagnostic wraps basic extra information Twitter API returns
// once a non 200 status code is returned.
type Diagnostic struct {
	ClientID              string `json:"client_id"`
	RequirementEnrollment string `json:"required_enrollment"`
	RegistrationURL       string `json:"registration_url"`
	Title                 string `json:"title"`
	Detail                string `json:"detail"`
	Reason                string `json:"reason"`
	Type                  string `json:"type"`
}

// IsFiled checks if error information is in Twitter API response body
func (d Diagnostic) IsFiled() bool {
	if d.Detail != "" || d.Type != "" || d.Title != "" {
		return true
	}
	return false
}

// String returns string representation of details about error
// in HTTP response body
func (d Diagnostic) String() string {
	defaultMessage := fmt.Sprintf("Detail: %s, Type: %s, Title: %s", d.Detail, d.Type, d.Title)
	if d.ClientID != "" {
		defaultMessage += " " + fmt.Sprintf(", Client id: %s", d.ClientID)
	}
	if d.RequirementEnrollment != "" {
		defaultMessage += " " + fmt.Sprintf("Required enrollment: %s", d.RequirementEnrollment)
	}
	if d.RegistrationURL != "" {
		defaultMessage += " " + fmt.Sprintf("Registration URL: %s", d.RegistrationURL)
	}
	if d.Reason != "" {
		defaultMessage += " " + fmt.Sprintf("Reason: %s", d.Reason)
	}
	return defaultMessage
}

// NewRequestFailure returns a wrapped error with additional information for
// request status code.
func NewRequestFailure(err error, statusCode int, message string) RequestFailure {
	return newRequestError(err, statusCode, message)
}

// newRequestError returns a wrapped error with additional information for
// request status code.
func newRequestError(err error, statusCode int, message string) *requestError {
	return &requestError{
		twitterError: err,
		statusCode:   statusCode,
		message:      message,
	}
}

// A requestError wraps a request or service error.
type requestError struct {
	twitterError error
	message      string
	statusCode   int
}

// String returns the string representation of the error.
// Alias for Error to satisfy the stringer interface.
func (r requestError) String() string {
	return r.Error()
}

// StatusCode returns the wrapped status code for the error
func (r requestError) StatusCode() int {
	return r.statusCode
}

// Error returns the string representation of the error.
// Satisfies the error interface.
func (r requestError) Error() string {
	extra := fmt.Sprintf("status code: %d", r.statusCode)
	return SprintError(r.Message(), extra, r.OrigErr())
}

func (r requestError) Message() string {
	return r.message
}

func (r requestError) OrigErr() error {
	return r.twitterError
}

// SprintError returns a string of the formatted error code.
//
// Both extra and origErr are optional.  If they are included their lines
// will be added, but if they are not included their lines will be ignored.
func SprintError(message, extra string, origErr error) string {
	if extra != "" {
		message = fmt.Sprintf("%s %s", message, extra)
	}
	if origErr != nil {
		message = fmt.Sprintf("%s\n caused by: %s", message, origErr.Error())
	}
	return message
}
